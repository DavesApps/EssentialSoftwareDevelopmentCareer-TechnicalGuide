(1.0/7.0) + (1.0/7.0) + (1.0/7.0) + (1.0/7.0) + (1.0/7.0) + (1.0/7.0) + (1.0/7.0) == 1.0

That comparison done with double variables in C Sharp would not be equal.

That’s because adding 1/7 together seven times equals 0.99999999999999978.

The best thing to do in these instances is to decide the precision you need and truncate to within the supported precision and round if desired.

if (Math.Round(((1.0 / 7.0) + (1.0 / 7.0) + (1.0 / 7.0) + (1.0 / 7.0) + (1.0 / 7.0) + (1.0 / 7.0) + (1.0 / 7.0)), 15)==1.0)

Console.WriteLine(“Equal”); //would be equal

else

Console.WriteLine(“Not Equal”);
An accepted answer on StackOverflow for comparing Equal:

bool CloseToEqual(double a, double b) { double epsilon1 = Math.Max(Math.Abs(a), Math.Abs(b)) * 1E-15; return Math.Abs(a - b) <= epsilon1; }

Note: Method/variable names were changed. See “C Sharp—Double.Epsilon for Equality, Greater than, Less than, Less than or Equal to, Greater than or Equal to,” Stack Overflow, n.d.)





References:


“C Sharp—Double.Epsilon for Equality, Greater than, Less than, Less than or Equal to, Greater than or Equal to”—Stack Overflow. (n.d.). Retrieved September 17, 2022, from https://stackoverflow.com/questions/2411392/double-epsilon-for-equality-greater-than-less-than-less-than-or-equal-to-gre. License:https://creativecommons.org/licenses/by-sa/2.5/ and https://creativecommons.org/licenses/by-sa/3.0/)
